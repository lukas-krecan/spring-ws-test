~~
~~ Copyright 2006 the original author or authors.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~      http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~
Reference

* XPath evaluation

  In this part we will describe possibilities of the XPath evaluation.

  Let's imagine that service URL is "http://www.csa.cz" and that following request was used
  
---
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
	<SOAP-ENV:Header />
	<SOAP-ENV:Body>
		<ns3:GetFlightsRequest
			xmlns:ns2="http://www.springframework.org/spring-ws/samples/airline/schemas/types"
			xmlns:ns3="http://www.springframework.org/spring-ws/samples/airline/schemas/messages">
			<ns3:from>PRG</ns3:from>
			<ns3:to>DUB</ns3:to>
			<ns3:departureDate>2059-07-27</ns3:departureDate>
			<ns3:serviceClass>economy</ns3:serviceClass>
		</ns3:GetFlightsRequest>
	</SOAP-ENV:Body>
</SOAP-ENV:Envelope>
---

   Also assume that WsTestContext was set like this

---
WsTestContextHolder.getTestContext().setAttribute("testName", "test136");
--- 

   Then following results will correspond to XPath expressions:
   {XPathEval}
   
*--------------------------------------------------------------------------------------------------+--------------------------------------------------+
|| XPath expression                                                                                || Result                                          ||
*--------------------------------------------------------------------------------------------------+--------------------------------------------------+
| concat(local-name(//soapenv:Body/*[1]),'-response.xml')                                          | GetFlightsRequest-response.xml                   |
*--------------------------------------------------------------------------------------------------+--------------------------------------------------+
|concat(local-name(//soapenv:Body/*[1]),'/default-response.xml')                                   | GetFlightsRequest/default-response.xml           |
*--------------------------------------------------------------------------------------------------+--------------------------------------------------+
|concat(local-name(//soapenv:Body/*[1]),'/',//ns:from,'-',//ns:to,'-response.xml')                 | GetFlightsRequest/PRG-DUB-response.xml           |
*--------------------------------------------------------------------------------------------------+--------------------------------------------------+
|concat($uri.host, '/', local-name(//soapenv:Body/*[1]),'/',//ns:from,'-',//ns:to,'-response.xml') | www.csa.cz/GetFlightsRequest/PRG-DUB-response.xml|
*--------------------------------------------------------------------------------------------------+--------------------------------------------------+
|concat($context.testName,'-response.xml')                                                         | test136-response.xml                             |
*--------------------------------------------------------------------------------------------------+--------------------------------------------------+
      
* Test context
  
  Test context can be used for more fine grained test configuration.
  
  In you test code you can specify a context attribute like this.
  
---
WsTestContextHolder.getTestContext().setAttribute("testName", "test136");
---
  
  Later on you can either retrieve it programmatically like this

---
WsTestContextHolder.getTestContext().getAttribute("testName")  
---   
  
  You can also access it in XPath like this 
  
---
concat($context.testName,'-response.xml')  
---
  
  or it is automatically injected as XSLT variable, so it can be accessed like this
  
---
<?xml version="1.0" encoding="windows-1250"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
	<xsl:param name="number"/>

	<xsl:template match="/">
		<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
			<soapenv:Header />
			<soapenv:Body>
				<ns:test xmlns:ns="http://www.example.org/schema">
					<ns:number>2</ns:number>
					<ns:text><xsl:value-of select="$testName"/></ns:text>
				</ns:test>
			</soapenv:Body>
		</soapenv:Envelope>
	</xsl:template>
</xsl:stylesheet>
--- 

